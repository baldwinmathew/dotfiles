# If not running interactively, don't do anything
if [[ -n "$PS1" ]] ; then
    Color_Off="\033[0m"
    Red="\033[0;31m"
    Green="\033[0;32m"
    Yellow="\033[0;33m"
    Blue="\033[0;34m"
    Purple="\033[0;35m"
    Gray="\033[0;37m"

    # set up command prompt
    function __prompt_command()
    {
        # capture the exit status of the last command
        EXIT="$?"
        PS1="\n"

        if [[ -h ".ve" && -d ".ve" ]]; then
            VE_DIR="`readlink .ve 2>/dev/null`"
            VE_NAME="`basename $VE_DIR 2>/dev/null`"
            if [[ ! $VIRTUAL_ENV == $VE_DIR ]]; then
                #workon $VE_NAME
                printf "\n${Red}Warning!!! ${Color_Off}You are inside of a virtualenv.\n"
                printf "Please run ${Green}workon ${VE_NAME}${Color_Off}\n"
            fi
        fi

        # Provide feedback if we are not currently working within the selected VIRTUAL_ENV
        if [[ -ne "$VIRTUAL_ENV" ]]; then
            PROJECT_DIR="`cat $VIRTUAL_ENV/.project 2> /dev/null`"
            CURRENT_DIR="`pwd`"
            if [[ -ne "$PROJECT_DIR" ]]; then
                if [[ ! $CURRENT_DIR =~ $PROJECT_DIR ]]; then
                    printf "\n${Red}`basename $VIRTUAL_ENV`${Color_Off} is currently active.\n"
                    printf "Please run ${Green}deactivate ${Color_Off}or return to ${Purple}${PROJECT_DIR}${Color_Off}\n"
                fi
            fi
        fi

        if [[ "$BASE_TERM" == "screen-256color" ]]; then
            # Setup prompt title name for screen session tab naming.
            PROMPT_TITLE='shell'
            if [[ -ne "$VIRTUAL_ENV" ]]; then
                PROMPT_TITLE=`basename $VIRTUAL_ENV`
            else
                DIR=$PWD
                LASTDIR=""
                until [[ $LASTDIR = $DIR ]]; do
                    if [ -f $DIR/.git/HEAD ]; then
                        PROMPT_TITLE=$(basename $DIR)
                        break
                    fi
                    if [ -f $DIR/.hg/branch ]; then
                        PROMPT_TITLE=$(basename $DIR)
                        break
                    fi
                    LASTDIR=$DIR
                    DIR=$(dirname $DIR)
                done
            fi
            #echo -ne "\ek$PROMPT_TITLE\e\\"
            echo -ne '\033k'$PROMPT_TITLE'\033\\'
        fi

        if [ $EXIT -eq 0 ]; then PS1+="\[$Green\][\!]\[$Color_Off\] "; else PS1+="\[$Red\][\!]\[$Color_Off\] "; fi

        # if logged in via ssh shows the ip of the client
        if [ -n "$SSH_CLIENT" ]; then PS1+="\[$Yellow\]("${$SSH_CLIENT%% *}")\[$Color_Off\]"; fi

        vcprompt() {
          ~/bin/vcprompt -f $'on %n:%b'
        }

        # basic information (user@host:path)
        PS1+="\[$Purple\]\u\[$Color_Off\] \
at \[$Yellow\]\h\[$Color_Off\] \
in \[$Green\]\w\[$Color_Off\] \
\[$Purple\]$(vcprompt)\[$Color_Off\]\
\[$Yellow\] $(~/.rvm/bin/rvm-prompt i v p g)\[$Color_Off\]"

        if [ -n "$VE_NAME" ]; then PS1+=" workon \[$Red\]$VE_NAME\[$Color_Off\]"; fi

        # prompt $ or # for root
        PS1+="\n\$ "
    }
    PROMPT_COMMAND=__prompt_command

    export EDITOR=vim
    export ARCHFLAGS="-arch x86_64"

    export BASE_TERM=$TERM
    export GREP_OPTIONS='--color=auto' GREP_COLOR='1;32'
    export CLICOLOR=1
    export LSCOLORS=ExGxFxDxCxHxHxCbCeEbEb
    export LC_CTYPE=en_US.utf-8
    export PATH=~/bin:/usr/local/sbin:/usr/local/bin:~/.local/bin/:$PATH
    export PATH=$PATH:/usr/local/mysql/bin
    export IGNOREEOF=1
    export PYTHONDONTWRITEBYTECODE=1
    export PIP_DOWNLOAD_CACHE=~/tmp/pip
    export PIP_REQUIRE_VIRTUALENV=true
    export LESS=FRSX

    #export JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk-1.7-x86_64/Contents/Home/
    #export PATH=/Library/Java/JavaVirtualMachines/openjdk-1.7-x86_64/Contents/Home/bin:$PATH
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/
    export PATH=/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/bin:$PATH

    # Mapnik
    if [ `id -u` != '0' ]; then
        export WORKON_HOME=$HOME/.virtualenvs
        export PROJECT_HOME=$HOME/projects
        export PIP_VIRTUALENV_BASE=$WORKON_HOME
        export PIP_RESPECT_VIRTUALENV=true
        export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
        export VIRTUALENV_USE_DISTRIBUTE=1
        #export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
        source /usr/local/bin/virtualenvwrapper.sh
    fi

    # Aliases
    alias rvim="gvim --remote-silent"
    alias emacs='echo "You are trying to learn vi... type \`vi\` instead."'
    alias em="emacs"
    alias ll="ls -alh"
    alias vi="/Applications/MacVim.app/Contents/MacOS/vim"
    alias vim="/Applications/MacVim.app/Contents/MacOS/vim"
    alias wget="wget --no-check-certificate"
    alias tmux="TERM=screen-256color-bce tmux"
    alias ric="ctags -R --exclude=.git --exclude=log --exclude=coverage * ~/.rvm/gems/\`rvm current\`"
    alias cuke="bundle && bundle exec rake db:schema:load RAILS_ENV=cucumber && bundle exec cucumber -t ~@slow"
    alias cuketag="bundle && bundle exec rake db:schema:load RAILS_ENV=cucumber && bundle exec cucumber -t "
    alias cukewip="bundle && bundle exec rake db:schema:load RAILS_ENV=cucumber && bundle exec cucumber -p wip"
    alias dbreset='bundle && thor import_from_prod:stale --app && rake migrate:all && RAILS_ENV=cucumber rake db:schema:load'
    alias p="echo -n '$1' > ~/.config/pianobar/ctl"
    alias cleardns="dscacheutil -flushcache"
    alias startpostgres="postgres -D /usr/local/var/postgres"

    alias rspec="bundle exec rspec"
    alias rake="bundle exec rake"
    alias ey="bundle exec ey"
    alias thor="bundle exec thor"
    alias rails="bundle exec rails"
    alias http_requests='sudo ngrep -d en1 -q -W byline "^(GET|POST) .*"'

    shopt -s histappend

    export NODE_PATH=$NODE_PATH:/usr/local/lib/node
    export PATH=$PATH:/usr/local/share/npm/bin

    # This needs to be xterm-256color-bce as opposed to xterm-256color for tmux/screen
    # to allow for redrawing of bg color
    #export TERM="xterm-256color"

    if [ -f `brew --prefix`/etc/bash_completion ]; then
        . `brew --prefix`/etc/bash_completion
    fi

    . ~/.bashrc.d/git-completion.bash
    complete -C rails-complete -o default rails

    continuous-make() {
      while true; do
        if ! make "$@" -q; then
          make "$@"
        fi
        sleep 5
      done
    }

    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"  # This loads RVM into a shell session.
    [[ -r $rvm_path/scripts/completion ]] && . $rvm_path/scripts/completion

    export QUEUE="csv_importer,pre_calculator,alarms,csv_importer_backlogged,pre_calculator_backlogged,alarms_backlogged,auto_mapper,setup,data_export,*"
    export NODE_PATH=/usr/local/lib/node_modules
    export MILIEU_ENV="dev"

    export VIMCLOJURE_SERVER_JAR="$HOME/lib/vimclojure/server-2.3.1.jar"

    function colours() {
      for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
      done
    }

    export HTML_TIDY=~/.bashrc.d/htmltidy

    export RUBY_HEAP_MIN_SLOTS=1000000
    export RUBY_HEAP_SLOTS_INCREMENT=1000000
    export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
    export RUBY_GC_MALLOC_LIMIT=100000000
    export RUBY_HEAP_FREE_MIN=500000

    # This ensures that gpg agent can prompt us for passwords on subshell commands
    export GPG_TTY=`tty`
    eval `keychain --eval --inherit any id_rsa`
fi

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
