" Sources:
"   http://stevelosh.com/blog/2010/09/coming-home-to-vim/
"   http://mirnazim.org/writings/vim-plugins-i-use/
"   http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide
"   http://learnvimscriptthehardway.stevelosh.com/
" Install:
"   easy_install flake8 autopep8 rope pytest
"
" Commands:
"  Gundo:
"     Graphical Undo: <leader>u
"  OmniComplete:
"     Code Completion: <c-x><c-o> OR <tab>
"  CTags:
"     Jump To Tag Definition: <c-]>
"     Jump Back To Code Use: <c-t>
"     http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
"  NerdCommenter:
"     Comment Toggle: <leader>c<space>
"  Ack:
"     Search: <leader>a
"     http://vimbits.com/bits/153
"     Search For Cursor: \a[wWbB]
"  CtrlP:
"     Search Files: <leader>.
"     Search Tags: <leader>/
"  TagBar:
"     Show Tag Tree: <leader>l
"  Git:
"     Find Conflict Markers: <leader>cf
"  Text Flow:
"     Reflow To OneLine: J
"     Rewrap Paragraph: <leader>q
"  YankRing:
"     Pasting Unformatted: <F6>
"     Show Paste Buffer: <leader>y
"     Paste From History: <C-p>
"  Windows Management:
"     Vertical Split: <leader>v
"     Horizontal Split: <leader>h
"  General:
"     Remove Trailing Whitespace: <leader>W
"  Python:
"     GoTo Documentation For Keyword Under Cursor: K
"     AutoPEP8: <leader>p
"     Run Code: <leader>r
"  MiniBufExplorer:
"     Show: <leader>b
"  PyTest:
"     Test File: <leader>t
"     Test File: <leader>tf
"     Test Class: <leader>tc
"     Test Method: <leader>tm
"     Next Test: <leader>tn
"     Previous Test: <leader>tp
"     Error Tests: <leader>te
"  Markdown:
"     Insert Header: <leader>=

" PathToGen:
"   Initialize pathogen to handle VIM bundles
"   http://andrewho.co.uk/weblog/vim-pathogen-with-mutt-and-git
  filetype off
  call pathogen#runtime_append_all_bundles()
  call pathogen#helptags()
  filetype plugin indent on

" GeneralSettings:
  " Gets rid of all the crap that Vim does to be vi compatible. It’s 2010 — we
  " don’t need to be compatible with vi at the expense of functionality any
  " more.
  set nocompatible

  " The modelines bit prevents some security exploits having to do with
  " modelines in files. I never use modelines so I don’t miss any
  " functionality here.
  set modelines=0

  " Fix backspace indentation
  set backspace=indent,eol,start

  if has("gui_running")
    " Ensure that when MacVim exists focus is returned to the terminal
    au VimLeave * maca hide:
  endif

  " Ensure that in terminals the redraw method better supports large paste
  " operations
  set ttyfast

  " Don't bell or blink(Courtesy: Cream Editor).
  if has('autocmd')
    autocmd GUIEnter * set vb t_vb=
  endif

  " When moving our cursor, do not have cursor go to the last line, keep
  " context
  set scrolloff=5

  " File and Buffer opening handling
    " Make tab completion for files/buffers act like bash
    set wildmenu
    " use emacs-style tab completion when selecting files, etc
    " set wildmode=longest,list
    " set wildmode=list:full
    set wildmode=list:longest
    set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class

  " Convince Vim it can use 256 colors inside Gnome Terminal.
  " Needs CSApprox plugin
  set t_Co=256

  " Code Folding, everything folded by default
  set foldmethod=indent
  set foldlevel=99
  set foldenable

  " Better modes.  Remeber where we are, support yankring
  set viminfo=!,'100,\"100,:20,<50,s10,h,n~/.viminfo'

  " Turn off annoying swapfiles
  set noswapfile

  " Move Backup Files to ~/.vim/sessions
  set backupdir=~/.vim/sessions
  set dir=~/.vim/sessions

  " ColorSchemesSyntax:
    " Enable Syntax Colors"
    syntax on
    if has("gui_running")
      set guifont=Mensch\ 10
    else
      colorscheme mustang
    endif

    " Solarized:
    "   https://github.com/altercation/vim-colors-solarized
    "   Requires https://github.com/godlygeek/csapprox
    "   Solarized Color Scheme
    set background=dark
    let g:solarized_termtrans=1
    let g:solarized_termcolors=256
    let g:solarized_contrast="high"
    let g:solarized_visibility="high"
    colorscheme solarized

  " The PC is fast enough, do syntax highlight syncing from start
  autocmd BufEnter * :syntax sync fromstart

  " Auto Save on lost focus
  au FocusLost * :wa

  " Remember cursor position
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

  " utf-8 default encoding
  set encoding=utf-8
  set enc=utf-8

  " KeyBindings:
    " Leaders
    let mapleader = ","
    let maplocalleader = "-"

    " Find merge conflict markers
    nmap <silent> <leader>cf <ESC>/\v^[<=>]{7}( .*\|$)<CR>

    " Remove trailing whitespace
    nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

    " Re-hardwrap paragraphs of text
    nnoremap <leader>q gqip

    " ; is an alias for :
    nnoremap ; :

    " Quicker Escape Node
    inoremap jj <ESC>

    " Left/Right arrow keys change buffers in all modes
    noremap <Left> <Esc>:bp<CR>
    inoremap <Left> <Esc>:bp<CR>
    nnoremap <Left> <Esc>:bp<CR>
    vnoremap <Left> <Esc>:bp<CR>
    noremap <Right> <Esc>:bn<CR>
    inoremap <Right> <Esc>:bn<CR>
    nnoremap <Right> <Esc>:bn<CR>
    vnoremap <Right> <Esc>:bn<CR>

    " Disable up/down arrow keys
    noremap <up> <nop>
    noremap <down> <nop>
    nnoremap <up> <nop>
    nnoremap <down> <nop>
    vnoremap <up> <nop>
    vnoremap <down> <nop>
    inoremap <up> <nop>
    inoremap <down> <nop>

    " makes j and k work the way you expect instead of working in some archaic
    " movement by file line instead of screen line” fashion. Move down one
    " disply line instead of one physical line
    nnoremap j gj
    nnoremap k gk

    " Easy heading creation with RestructuredText
    map <leader>=  yypVr

    " Toggle paste
    " For some reason pastetoggle doesn't redraw the screen (thus the status bar
    " doesn't change) while :set paste! does, so I use that instead.
    " set pastetoggle=<F6>
    nnoremap <F6> :set paste!<cr>

  " Search:
    " Use sane regexes
    nnoremap / /\v
    vnoremap / /\v
    " Make searches case-sensitive only if they contain upper-case characters
    set ignorecase
    set smartcase
    set gdefault
    set incsearch
    set showmatch
    set hlsearch
    " Hide search matches on <leader>space
    nnoremap <leader><space> :noh<cr>

  " Line Wrapping:
    set wrap
    set textwidth=79
    set formatoptions=qrn1
    set colorcolumn=80

  " Show Invisible Characters
    " set list
    " set listchars=tab:▸\ ,eol:¬

  " IndentationRules:
    set expandtab
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
    set autoindent

  " General Betterment:
    " Activate a permanent ruler
    set ruler
    " set relativenumber changes Vim’s line number column to display how far away each line is
    " from the current one, instead of showing the absolute line number.
    " The inverse is `set number`
    " set relativenumber
    set number
    set cursorline
    set visualbell
    set hidden
    set showcmd

  " Undo:
    if exists("+undofile")
      " undofile - This allows you to use undos after exiting and restarting
      " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
      " :help undo-persistence
      " This is only present in 7.3+
      if isdirectory($HOME . '/.vim/undo') == 0
        :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
      endif
      set undodir=./.vim-undo//
      set undodir+=~/.vim/undo//
      set undofile
    endif

  " MouseSupport:
    " Enable mouse everywhere
    set mouse=a
    " Hide mouse pointer while typing
    set mousehide
    set mousemodel=popup
    " Make mouse middle click paste without formatting it.
    map <MouseMiddle> <Esc>"*p

" FOLDING:
  if v:version >= 703
      set foldlevelstart=99
  endif

  nnoremap <Space> za
  onoremap <Space> <C-C>za
  vnoremap <Space> zf
  au BufNewFile,BufRead *.html map <leader>ft Vatzf

  function! MyFoldText()
      let line = getline(v:foldstart)

      let nucolwidth = &fdc + &number * &numberwidth
      let windowwidth = winwidth(0) - nucolwidth - 3
      let foldedlinecount = v:foldend - v:foldstart

      " expand tabs into spaces
      let onetab = strpart('          ', 0, &tabstop)
      let line = substitute(line, '\t', onetab, 'g')

      let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
      let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
      if has('gui_running')
          return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
      else
          return line . '...' . repeat(" ",fillcharcount) . foldedlinecount . '...' . ' '
      endif
  endfunction
  if v:version >= 703
      set foldtext=MyFoldText()
  endif

""""""""""""
" PLUGINS:
""""""""""""

" CtrlP:
"   https://github.com/kien/ctrlp.vim
  nnoremap <leader>/ :CtrlPTag<cr>
  let g:ctrlp_map = '<leader>.'
  let g:ctrlp_working_path_mode = 'ra'
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
  let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/](\.(git|hg|svn)|coverage|vendor)$',
        \ 'file': '\v\.(exe|so|dll)$',
        \ 'link': '\v[\/](ve)$',
        \ }

" CloseTag:
"   https://github.com/docunext/closetag.vim
"   Setup closetag loading support for common HTML like files
  autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
  autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

" SuperTab:
"   https://github.com/ervandew/supertab
"   Configure SuperTab that is an enhanced version of OmniComplete. This configuration should happen below all OmniComplete configurations
  let g:SuperTabDefaultCompletionType = "context"

  " Autoclose OmniComplete preview window on selection
  let g:SuperTabClosePreviewOnPopupClose = 1
  " Disable the pydoc preview window for the omni completion
  "set completeopt-=preview

" TagBar:
"   https://github.com/majutsushi/tagbar
  let g:tagbar_usearrows = 1
  nnoremap <leader>l :TagbarToggle<CR>

" PythonSyntax:
"   https://github.com/olivierverdier/python-syntax.vim
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
  \ formatoptions+=croq softtabstop=4 smartindent
  \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
  let python_highlight_all=1
  let python_highlight_exceptions=0
  let python_highlight_builtins=0
  autocmd FileType pyrex setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with

" RubySyntax:
  autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 colorcolumn=79

" Syntastic:
"   https://github.com/scrooloose/syntastic
  " Make the command line two lines high and change the statusline display to
  " something that looks useful.
  set cmdheight=2
  set laststatus=2
  set statusline=[%l,%v\ %P%M][CWD:\ %{CWD()}][FILE:\ %f]\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}\ %#warningmsg#%{SyntasticStatuslineFlag()}%*
  set showmode

  function! CWD()
    let curdir = substitute(getcwd(), '/Users/nstrite', "~", "g")
    return curdir
  endfunction

" Gundo:
"   https://github.com/sjl/gundo.vim/
  nnoremap <leader>u :GundoToggle<CR>

" Rainbows:
"   https://github.com/kien/rainbow_parentheses.vim
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces

" Ack:
  nnoremap <leader>a :Ack!<space>
  " Ack motions
  " Motions to Ack for things.  Works with pretty much everything, including:
  "
  "   w, W, e, E, b, B, t*, f*, i*, a*, and custom text objects
  "
  " Awesome.
  "
  " Note: If the text covered by a motion contains a newline it won't work.  Ack
  " searches line-by-line.
  nnoremap <silent> \a :set opfunc=<SID>AckMotion<CR>g@
  xnoremap <silent> \a :<C-U>call <SID>AckMotion(visualmode())<CR>

  function! s:CopyMotionForType(type)
      if a:type ==# 'v'
          silent execute "normal! `<" . a:type . "`>y"
      elseif a:type ==# 'char'
          silent execute "normal! `[v`]y"
      endif
  endfunction

  function! s:AckMotion(type) abort
      let reg_save = @@

      call s:CopyMotionForType(a:type)

      execute "normal! :Ack! --literal " . shellescape(@@) . "\<cr>"

      let @@ = reg_save
  endfunction

" YankRing:
  noremap <leader>y :YRShow<CR>

" PythonMode:
  " Allow for quick autopep8
  noremap <leader>p :PyLintAuto<CR>

  " Disable Rope integration
  let g:pymode_rope= 1

  " Disable pymode's custom syntax highlighting
  let g:pymode_syntax = 0

  " Load pylint code plugin
  let g:pymode_lint = 1

  " Disable pylint checking every save
  let g:pymode_lint_write = 0

  " Load show documentation plugin
  let g:pymode_doc = 1

  " Key for show python documentation
  let g:pymode_doc_key = 'K'

  " Load run code plugin
  let g:pymode_run = 1

  " Key for run python code
  let g:pymode_run_key = '<leader>r'

  " Enable python folding
  let g:pymode_folding = 1

  " Enable python objects and motion
  let g:pymode_motion = 1

  " Auto fix vim python paths if virtualenv enabled
  let g:pymode_virtualenv = 1

" Minibufexpl
  " Map a good default key
  map <Leader>b :MiniBufExplorer<cr>

  " We use TagList so enable this
  let g:miniBufExplModSelTarget = 1

  " Disable Duplicate Buffer Name Checks for performance
  let g:miniBufExplCheckDupeBufs = 0

  " Only let it get 3 lines long
  let g:miniBufExplMaxSize = 5

" PyTest
  " Execute the tests
  nmap <silent><Leader>t <Esc>:Pytest file<CR>
  nmap <silent><Leader>tf <Esc>:Pytest file<CR>
  nmap <silent><Leader>tc <Esc>:Pytest class<CR>
  nmap <silent><Leader>tm <Esc>:Pytest method<CR>
  " cycle through test errors
  nmap <silent><Leader>tn <Esc>:Pytest next<CR>
  nmap <silent><Leader>tp <Esc>:Pytest previous<CR>
  nmap <silent><Leader>te <Esc>:Pytest error<CR>"

" MakeGreen:
  autocmd BufNewFile,BufRead *.py compiler nose
