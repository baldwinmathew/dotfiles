" Commands:
"  Gundo:
"     Graphical Undo: <leader>u
"  OmniComplete:
"     Code Completion: <c-x><c-o>
"  CTags:
"     Jump To Tag Definition: <c-]>
"     Jump Back To Code Use: <c-t>
"     http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
"  NerdCommenter:
"     Comment Toggle: <leader>c<space>
"  Ack:
"     Search: <leader>a
"     http://vimbits.com/bits/153
"     Search For Cursor: \a[wWbB]
"  CtrlP:
"     Search Files: <leader>.
"     Search Tags: <leader>/
"  TagBar:
"     Show Tag Tree: <leader>l

" PathToGen:
"   Initialize pathogen to handle VIM bundles
"   http://andrewho.co.uk/weblog/vim-pathogen-with-mutt-and-git
  filetype off
  call pathogen#runtime_append_all_bundles()
  call pathogen#helptags()
  filetype plugin indent on

" GeneralSettings:
  " No Vi Compatibility. That just sucks.
  set nocompatible

  " Fix backspace indentation
  set backspace=indent,eol,start

  " Ensure that when MacVim exists focus is returned to the terminal
  au VimLeave * maca hide:

  " Ensure that in terminals the redraw method better supports large paste
  " operations
  set ttyfast

  " Don't bell or blink(Courtesy: Cream Editor).
  if has('autocmd')
    autocmd GUIEnter * set vb t_vb=
  endif

  " When moving our cursor, do not have cursor go to the last line, keep
  " context
  set scrolloff=5

  " File and Buffer opening handling
    " Make tab completion for files/buffers act like bash
    set wildmenu
    " use emacs-style tab completion when selecting files, etc
    set wildmode=longest,list
    "set wildmode=list:full
    set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class

  " Make searches case-sensitive only if they contain upper-case characters
  set ignorecase
  set smartcase

  " Enable automatic title setting for terminals
  set title
  set titleold="Terminal"
  set titlestring=%F\ -\ Vim

  " Convince Vim it can use 256 colors inside Gnome Terminal.
  " Needs CSApprox plugin
  set t_Co=256

  " Code Folding, everything folded by default
  set foldmethod=indent
  set foldlevel=99
  set foldenable

  " Better modes.  Remeber where we are, support yankring
  set viminfo=!,'100,\"100,:20,<50,s10,h,n~/.viminfo'

  " Turn off annoying swapfiles
  set noswapfile

  " Move Backup Files to ~/.vim/sessions
  set backupdir=~/.vim/sessions
  set dir=~/.vim/sessions

  " ColorSchemesSyntax:
    " Enable Syntax Colors"
    syntax on
    if has("gui_running")
      set guifont=Mensch\ 10
    else
      colorscheme mustang
    endif

    " Solarized:
    "   https://github.com/altercation/vim-colors-solarized
    "   Requires https://github.com/godlygeek/csapprox
    "   Solarized Color Scheme
    set background=dark
    let g:solarized_termtrans=1
    let g:solarized_termcolors=256
    let g:solarized_contrast="high"
    let g:solarized_visibility="high"
    colorscheme solarized

  " The PC is fast enough, do syntax highlight syncing from start
  autocmd BufEnter * :syntax sync fromstart

  " Remember cursor position
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

  " utf-8 default encoding
  set enc=utf-8

  " KeyBindings:
    " Leaders
    let mapleader = ","
    let maplocalleader = "-"

    " ; is an alias for :
    nnoremap ; :

    " Left/Right arrow keys change buffers in all modes
    noremap <Left> <Esc>:bp<CR>
    inoremap <Left> <Esc>:bp<CR>
    nnoremap <Left> <Esc>:bp<CR>
    vnoremap <Left> <Esc>:bp<CR>
    noremap <Right> <Esc>:bn<CR>
    inoremap <Right> <Esc>:bn<CR>
    nnoremap <Right> <Esc>:bn<CR>
    vnoremap <Right> <Esc>:bn<CR>

    " Disable up/down arrow keys
    noremap <up> <nop>
    noremap <down> <nop>
    nnoremap <up> <nop>
    nnoremap <down> <nop>
    vnoremap <up> <nop>
    vnoremap <down> <nop>
    inoremap <up> <nop>
    inoremap <down> <nop>
    
    " Hide search matches on <leader>space
    nnoremap <leader><space> :nohlsearch<cr>
    
    " Remove trailing whitespace on <leader>S
    nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>"

    " Split window management
    nnoremap <leader>w <C-w>v<C-w>l
    nnoremap <leader>W <C-w>s

    " Easy heading creation with RestructuredText
    map <leader>=  yypVr

  " Search:
    set hlsearch
    set incsearch
    set showmatch

  " IndentationRules:
    set expandtab
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
    set autoindent
    " set smartindent

  " Activate a permanent ruler 
  set ruler

  " Disable the stupid pydoc preview window for the omni completion
  set completeopt-=preview

  " MouseSupport:
    " Enable mouse everywhere
    set mouse=a
    " Hide mouse pointer while typing
    set mousehide
    set mousemodel=popup
    " Make mouse middle click paste without formatting it.
    map <MouseMiddle> <Esc>"*p

" FOLDING:
  if v:version >= 703
      set foldlevelstart=99
  endif

  nnoremap <Space> za
  onoremap <Space> <C-C>za
  vnoremap <Space> zf
  "au BufNewFile,BufRead *.html map <leader>ft Vatzf

  function! MyFoldText()
      let line = getline(v:foldstart)

      let nucolwidth = &fdc + &number * &numberwidth
      let windowwidth = winwidth(0) - nucolwidth - 3
      let foldedlinecount = v:foldend - v:foldstart

      " expand tabs into spaces
      let onetab = strpart('          ', 0, &tabstop)
      let line = substitute(line, '\t', onetab, 'g')

      let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
      let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
      if has('gui_running')
          return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
      else
          return line . '...' . repeat(" ",fillcharcount) . foldedlinecount . '...' . ' '
      endif
  endfunction
  if v:version >= 703
      set foldtext=MyFoldText()
  endif

""""""""""""
" PLUGINS:
""""""""""""

" CtrlP:
"   https://github.com/kien/ctrlp.vim
  nnoremap <leader>/ :CtrlPTag<cr>
  let g:ctrlp_map = '<leader>.'
  let g:ctrlp_working_path_mode = 'ra'
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](\.(git|hg|svn)|coverage|vendor)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': '\v[\/](ve)$',
    \ }

" CloseTag:
"   https://github.com/docunext/closetag.vim
"   Setup closetag loading support for common HTML like files
  autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
  autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

" SuperTab:
"   https://github.com/ervandew/supertab
"   Configure SuperTab that is an enhanced version of OmniComplete. This configuration should happen below all OmniComplete configurations
  let g:SuperTabDefaultCompletionType = "context"

" TagBar:
"   https://github.com/majutsushi/tagbar
  let g:tagbar_usearrows = 1
  nnoremap <leader>l :TagbarToggle<CR>

" PythonSyntax:
"   https://github.com/olivierverdier/python-syntax.vim
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
  \ formatoptions+=croq softtabstop=4 smartindent
  \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
  let python_highlight_all=1
  let python_highlight_exceptions=0
  let python_highlight_builtins=0
  autocmd FileType pyrex setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with

" RubySyntax:
  autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 colorcolumn=79

" Syntastic:
"   https://github.com/scrooloose/syntastic
  " Make the command line two lines high and change the statusline display to
  " something that looks useful.
  set cmdheight=2
  set laststatus=2
  set statusline=[%l,%v\ %P%M][CWD:\ %{CWD()}][FILE:\ %f]\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}\ %#warningmsg#%{SyntasticStatuslineFlag()}%*
  set showcmd
  set showmode
  set number

  function! CWD()
    let curdir = substitute(getcwd(), '/Users/nstrite', "~", "g")
    return curdir
  endfunction

" Gundo:
"   https://github.com/sjl/gundo.vim/
  nnoremap <leader>u :GundoToggle<CR>

" Rainbows:
"   https://github.com/kien/rainbow_parentheses.vim
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces

" Ack:
  nnoremap <leader>a :Ack!<space>
  " Ack motions
  " Motions to Ack for things.  Works with pretty much everything, including:
  "
  "   w, W, e, E, b, B, t*, f*, i*, a*, and custom text objects
  "
  " Awesome.
  "
  " Note: If the text covered by a motion contains a newline it won't work.  Ack
  " searches line-by-line.
  nnoremap <silent> \a :set opfunc=<SID>AckMotion<CR>g@
  xnoremap <silent> \a :<C-U>call <SID>AckMotion(visualmode())<CR>

  function! s:CopyMotionForType(type)
      if a:type ==# 'v'
          silent execute "normal! `<" . a:type . "`>y"
      elseif a:type ==# 'char'
          silent execute "normal! `[v`]y"
      endif
  endfunction

  function! s:AckMotion(type) abort
      let reg_save = @@

      call s:CopyMotionForType(a:type)

      execute "normal! :Ack! --literal " . shellescape(@@) . "\<cr>"

      let @@ = reg_save
  endfunction
